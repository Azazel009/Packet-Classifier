/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject3;

import java.io.EOFException;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapNativeException;

/**
 *
 * @author Zero
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    javax.swing.JTable table;
    javax.swing.JScrollPane scrollPane;
    PacketSniffer app;

    public GUI() throws PcapNativeException, NotOpenException, EOFException, TimeoutException {
        initComponents();
        app = new PacketSniffer();
        //table = new javax.swing.JTable(app.packets.size(),3);
        // scrollPane = new javax.swing.JScrollPane();
        // scrollPane.setViewportView(table);

        //scrollPane.setVisible(true);
        //   table.setVisible(true);
        //  pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        File = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jFrame2 = new javax.swing.JFrame();
        jLabel10 = new javax.swing.JLabel();
        Time = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        http = new javax.swing.JLabel();
        https = new javax.swing.JLabel();
        rtp = new javax.swing.JLabel();
        rtsp = new javax.swing.JLabel();
        dns = new javax.swing.JLabel();
        ftp = new javax.swing.JLabel();
        TotalPackets = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        unknown = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jFrame1.setMinimumSize(new java.awt.Dimension(600, 600));
        jFrame1.setPreferredSize(new java.awt.Dimension(733, 589));
        jFrame1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jFrame1WindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jFrame1WindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                jFrame1WindowDeactivated(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );

        jFrame2.setMinimumSize(new java.awt.Dimension(500, 500));

        jLabel10.setText("Time");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addComponent(jLabel10)
                .addGap(53, 53, 53)
                .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PacketNo", "TYPE", "Source Port", "Destination Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("Total Packets:");

        jLabel2.setText("HTTP:");

        jLabel3.setText("HTTPS:");

        jLabel4.setText("RTP:");

        jLabel5.setText("RTSP:");

        jLabel6.setText("DNS:");

        jLabel7.setText("FTP:");

        http.setText("0");

        https.setText("0");

        rtp.setText("0");

        rtsp.setText("0");

        dns.setText("0");

        ftp.setText("0");

        TotalPackets.setText("0");

        jLabel8.setText("UnKnown");

        unknown.setText("0");

        jMenu2.setText("Run");

        jMenuItem1.setText("Open Live Capture");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Open File");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(TotalPackets))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(http, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(https, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rtp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rtsp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dns, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ftp, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unknown)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TotalPackets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(http))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(https)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rtp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rtsp)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dns)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(ftp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(unknown))
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        try {
            // TODO add your handling code here:
            app.getNetworkDevice();
        } catch (PcapNativeException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < app.networks.size(); i++) {
            Object[] row = {};
            model.addRow(row);
            jTable2.setValueAt(app.networks.get(i).getName(), i, 0);
            jTable2.setValueAt(app.networks.get(i).getDescription(), i, 1);
        }
        jFrame2.setVisible(true);


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        File.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = File.showOpenDialog(GUI.this);
        if (result == File.APPROVE_OPTION) {
            // user selects a file
            File selectedFile = File.getSelectedFile();
            if (selectedFile.getName().contains(".pcap")) {
                String path = selectedFile.getAbsoluteFile().toString();
                try {
                    app.OpenFile(path);

                    int rtpcount = 0;
                    int rtspcount = 0;
                    int httpcount = 0;
                    int httpscount = 0;
                    int ftpcount = 0;
                    int dbscount = 0;
                    int unknowncount = 0;
                    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
                    model.setRowCount(0);
                    for (int i = 0; i < app.packets.size(); i++) {
                        Object[] row = {};

                        model.addRow(row);
                        jTable1.setValueAt(app.packets.get(i).packetnumber, i, 0);
                        jTable1.setValueAt(app.packets.get(i).Type, i, 1);
                        jTable1.setValueAt(app.packets.get(i).SrcPort, i, 2);
                        jTable1.setValueAt(app.packets.get(i).DesPort, i, 3);
                        if (app.packets.get(i).Type.equals("RTP")) {
                            rtpcount++;
                        }
                        if (app.packets.get(i).Type.equals("HTTP")) {
                            httpcount++;
                        }
                        if (app.packets.get(i).Type.equals("RTSP")) {
                            rtspcount++;
                        }
                        if (app.packets.get(i).Type.equals("DNS")) {
                            dbscount++;
                        }
                        if (app.packets.get(i).Type.equals("HTTPS")) {
                            httpscount++;
                        }
                        if (app.packets.get(i).Type.equals("FTP")) {
                            ftpcount++;
                        }
                        if (app.packets.get(i).Type.equals("UnKnown")) {
                            unknowncount++;
                        }

                    }
                    TotalPackets.setText(Integer.toString(app.packets.size()));
                    rtp.setText(Integer.toString(rtpcount) + " (" + (float) (rtpcount * 100) / app.packets.size() + "%)");
                    http.setText(Integer.toString(httpcount) + " (" + (float) (httpcount * 100) / app.packets.size() + "%)");
                    rtsp.setText(Integer.toString(rtspcount) + " (" + (float) (rtspcount * 100) / app.packets.size() + "%)");
                    ftp.setText(Integer.toString(ftpcount) + " (" + (float) (ftpcount * 100) / app.packets.size() + "%)");
                    https.setText(Integer.toString(httpscount) + " (" + (float) (httpscount * 100) / app.packets.size() + "%)");
                    dns.setText(Integer.toString(dbscount) + " (" + (float) (dbscount * 100) / app.packets.size() + "%)");
                    unknown.setText(Integer.toString(unknowncount) + " (" + (float) (unknowncount * 100) / app.packets.size() + "%)");
                } catch (PcapNativeException ex) {
                    JOptionPane.showMessageDialog(GUI.this, "Select a proper pcap file");
                } catch (NotOpenException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (EOFException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (TimeoutException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(GUI.this, "Select a proper pcap file");
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        String s = "";
        try {
            if (app.packets.get(row).packet.getPayload().getPayload().getPayload().getPayload() != null) {
                s = new String(app.packets.get(row).packet.getPayload().getPayload().getPayload().getPayload().getRawData(), StandardCharsets.UTF_8);
            }
        } catch (Exception ex) {
            s = "";
        }

        jTextArea1.setText(app.packets.get(row).packet.getPacket() + "\n" + s);
        jFrame1.setVisible(true);
        //Data.setVisible(true);
        // JOptionPane.showMessageDialog(GUI.this,s);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jFrame1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowClosing
        // TODO add your handling code here:
        jFrame1.setVisible(false);
    }//GEN-LAST:event_jFrame1WindowClosing

    private void jFrame1WindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowDeactivated
        // TODO add your handling code here:
        jFrame1.setVisible(false);
    }//GEN-LAST:event_jFrame1WindowDeactivated

    private void jFrame1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowClosed
        // TODO add your handling code here:
        jFrame1.setVisible(false);
    }//GEN-LAST:event_jFrame1WindowClosed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:     
        javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
        int rowno = source.rowAtPoint(evt.getPoint());
        String NetworkName = (String) jTable2.getValueAt(rowno, 0);
        try {
            int time = Integer.parseInt(Time.getText());
            jFrame2.setVisible(false);
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            app.OpenLive(NetworkName, time);
            int rtpcount = 0;
            int rtspcount = 0;
            int httpcount = 0;
            int httpscount = 0;
            int ftpcount = 0;
            int dbscount = 0;
            int unknowncount = 0;

            for (int i = 0; i < app.packets.size(); i++) {
                Object[] row = {};

                model.addRow(row);
                jTable1.setValueAt(app.packets.get(i).packetnumber, i, 0);
                jTable1.setValueAt(app.packets.get(i).Type, i, 1);
                jTable1.setValueAt(app.packets.get(i).SrcPort, i, 2);
                jTable1.setValueAt(app.packets.get(i).DesPort, i, 3);
                if (app.packets.get(i).Type.equals("RTP")) {
                    rtpcount++;
                }
                if (app.packets.get(i).Type.equals("HTTP")) {
                    httpcount++;
                }
                if (app.packets.get(i).Type.equals("RTSP")) {
                    rtspcount++;
                }
                if (app.packets.get(i).Type.equals("DNS")) {
                    dbscount++;
                }
                if (app.packets.get(i).Type.equals("HTTPS")) {
                    httpscount++;
                }
                if (app.packets.get(i).Type.equals("FTP")) {
                    ftpcount++;
                }
                if (app.packets.get(i).Type.equals("UnKnown")) {
                    unknowncount++;
                }

            }
            TotalPackets.setText(Integer.toString(app.packets.size()));
            rtp.setText(Integer.toString(rtpcount) + " (" + (float) (rtpcount * 100) / app.packets.size() + "%)");
            http.setText(Integer.toString(httpcount) + " (" + (float) (httpcount * 100) / app.packets.size() + "%)");
            rtsp.setText(Integer.toString(rtspcount) + " (" + (float) (rtspcount * 100) / app.packets.size() + "%)");
            ftp.setText(Integer.toString(ftpcount) + " (" + (float) (ftpcount * 100) / app.packets.size() + "%)");
            https.setText(Integer.toString(httpscount) + " (" + (float) (httpscount * 100) / app.packets.size() + "%)");
            dns.setText(Integer.toString(dbscount) + " (" + (float) (dbscount * 100) / app.packets.size() + "%)");
            unknown.setText(Integer.toString(unknowncount) + " (" + (float) (unknowncount * 100) / app.packets.size() + "%)");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(jFrame2, "Enter Correct Time");
        }
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws PcapNativeException, NotOpenException, EOFException, TimeoutException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        GUI g = new GUI();
        g.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser File;
    private javax.swing.JTextField Time;
    private javax.swing.JLabel TotalPackets;
    private javax.swing.JLabel dns;
    private javax.swing.JLabel ftp;
    private javax.swing.JLabel http;
    private javax.swing.JLabel https;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel rtp;
    private javax.swing.JLabel rtsp;
    private javax.swing.JLabel unknown;
    // End of variables declaration//GEN-END:variables
}
